//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NewsletterAppMVC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    public partial class NewsletterEntities : DbContext
    {
        public NewsletterEntities()
            : base("name=NewsletterEntities")//referring to the Web.config XML field that stores our connectionString at the bottom of the file 
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<SignUp> SignUps { get; set; }//if you had multiple tables, not just SignUps, then each table would get its own property for this class
        //you can see it is a DbSet which is a type of list of SignUp objects, each object being a record of this particular table
    }
}
//It's a partial class which is simply a class that can be added on to...not too important for our purposes but introduces the idea of having one class defined in separate CS files
//so if you wanted to extend this class, maybe give it specialized methods, you would want to define them outside of the file itself as another partial public class NewsletterEntities 
//the reason you'd want to do that is anytime we import an updated Database schema, this file gets re-created. So if we added a bunch of methods and then imported a new schema then everything 
//would get overwritten. So if you want to add to it, you create a partial class and C# merges them together into one big class composed of 2 or more partial classes. 

//This class defines our access to the database. It inherits from DbContext which is the root class in entity framework that carries the bulk of methods and logic for connecting with our database.
//Notice the constructor for NewsletterEntities inherits from the constructor for DbContext and it passes an argument to it, which actually refers to our connectionString for our database that is 
//contained within Web.config file in an XML tag with name=NewsletterEntities
//So when you instantiate the NewsletterEntities class, the constructor is automatically called and it runs the base method using the connectionString to connect to the database and we can then make
//database calls directly through the object of the NewsletterEntities class we instantiated 